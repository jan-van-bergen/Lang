; Generated by Lang compiler

GLOBAL main

SECTION .code
EXTERN GetProcessHeap

EXTERN HeapAlloc

EXTERN HeapFree

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve stack space for 4 locals
    mov rbx, 20
    lea r10, QWORD [rbp + -32] ; get address of 'len'
    mov DWORD [r10], ebx
    sub rsp, 32 ; reserve shadow space and 0 arguments
    call GetProcessHeap
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -24] ; get address of 'heap'
    mov QWORD [r10], rbx
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [rbp + -24] ; get value of 'heap'
    mov rcx, rbx ; arg 0
    mov rbx, 0
    mov rdx, rbx ; arg 1
    movsx rbx, DWORD [rbp + -32] ; get value of 'len'
    mov r10, 4 ; sizeof 'i32'
    imul rbx, r10
    mov r8, rbx ; arg 2
    call HeapAlloc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'array'
    mov QWORD [r10], rbx
    mov rbx, 0
    lea r10, QWORD [rbp + -8] ; get address of 'i'
    mov DWORD [r10], ebx
    L_loop0:
    movsx rbx, DWORD [rbp + -8] ; get value of 'i'
    movsx r10, DWORD [rbp + -32] ; get value of 'len'
    cmp rbx, r10
    jge L1
    mov rbx, 1
    jmp L2
    L1:
    mov rbx, 0
    L2:
    cmp rbx, 0
    je L_exit0
        movsx rbx, DWORD [rbp + -8] ; get value of 'i'
        mov r10, 4 ; sizeof 'i32'
        imul rbx, r10
        mov r10, QWORD [rbp + -16] ; get value of 'array'
        add r10, rbx
        movsx rbx, DWORD [rbp + -8] ; get value of 'i'
        mov r11, 1
        add rbx, r11
        mov DWORD [r10], ebx
        movsx rbx, DWORD [rbp + -8] ; get value of 'i'
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -8] ; get address of 'i'
        mov DWORD [r10], ebx
    jmp L_loop0
    L_exit0:
    mov rbx, 5
    mov r10, 4 ; sizeof 'i32'
    imul rbx, r10
    mov r10, QWORD [rbp + -16] ; get value of 'array'
    add r10, rbx
    movsx r10, DWORD [r10]
    mov rax, r10 ; return via rax
    jmp L_function_main_exit
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    
SECTION .data

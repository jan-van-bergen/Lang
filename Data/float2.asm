; Generated by Lang compiler

GLOBAL main

SECTION .code
min:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    movss DWORD [rbp + 16], xmm0 ; push arg 0 
    movss DWORD [rbp + 24], xmm1 ; push arg 1 
    movss xmm5, DWORD [rbp + 16]
    movss xmm6, DWORD [rbp + 24]
    comiss xmm5, xmm6
    setl bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_else0
        movss xmm5, DWORD [rbp + 16]
        movss xmm0, xmm5 ; return via xmm0
        jmp L_function_min_exit
        
    jmp L_exit0
    L_else0:
        movss xmm5, DWORD [rbp + 24]
        movss xmm0, xmm5 ; return via xmm0
        jmp L_function_min_exit
        
    L_exit0:
    
    xor rax, rax ; Default return value 0
    L_function_min_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 3 locals
    lea rbx, QWORD [rbp + -16] ; get address of 'a'
    movss xmm4, DWORD [REL lit_flt_0]
    movss DWORD [rbx], xmm4
    
    lea rbx, QWORD [rbp + -12] ; get address of 'b'
    movss xmm4, DWORD [REL lit_flt_1]
    movss DWORD [rbx], xmm4
    
    sub rsp, 32 ; reserve shadow space and 2 arguments
    movss xmm5, DWORD [rbp + -16]
    movss xmm0, xmm5 ; arg 1
    movss xmm5, DWORD [rbp + -12]
    movss xmm1, xmm5 ; arg 2
    call min
    add rsp, 32 ; pop arguments
    movss xmm4, xmm0 ; get return value
    lea rbx, QWORD [rbp + -8] ; get address of 'm'
    movss DWORD [rbx], xmm4
    
    movss xmm5, DWORD [rbp + -8]
    movss xmm4, DWORD [REL lit_flt_2]
    addss xmm5, xmm4
    cvttss2si rbx, xmm5
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data
lit_flt_0 dq 40880000h ; 4.250000f
lit_flt_1 dq 402f5c29h ; 2.740000f
lit_flt_2 dq 3f000000h ; 0.500000f

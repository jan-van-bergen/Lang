; Generated by Lang compiler

GLOBAL main

SECTION .code
EXTERN GetProcessHeap

EXTERN HeapAlloc

EXTERN HeapFree

EXTERN GetStdHandle

EXTERN WriteFile

EXTERN ExitProcess

malloc:
    mov QWORD [rsp + 1 * 8], rcx
    sub rsp, 0 * 8 + 8; 0 vars + alignment
    mov rbx, QWORD [REL heap] ; get heap
    mov r10, 0
    cmp rbx, r10
    jne L0
    mov rbx, 1
    jmp L1
    L0:
    mov rbx, 0
    L1:
    cmp rbx, 0
    je L_exit2
        sub rsp, 32 ; shadow space
        call GetProcessHeap
        add rsp, 4 * 8
        mov rbx, rax ; get return value
        lea r10, QWORD [REL heap] ; addr of heap
        mov QWORD [r10], rbx
    L_exit2:
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [REL heap] ; get heap
    mov rcx, rbx ; arg 0
    mov rbx, 0
    mov rdx, rbx ; arg 1
    mov rbx, QWORD [rsp + 6 * 8] ; get size
    mov r8, rbx ; arg 2
    call HeapAlloc
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    mov rax, rbx ; return via rax
    add rsp, 8
    ret
    ; Default return
    add rsp, 8
    xor rax, rax
    ret
    
free:
    mov QWORD [rsp + 1 * 8], rcx
    sub rsp, 0 * 8 + 8; 0 vars + alignment
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rsp + 6 * 8] ; get ptr
    mov r10, 0
    cmp rbx, r10
    je L3
    mov rbx, 1
    jmp L4
    L3:
    mov rbx, 0
    L4:
    mov rcx, rbx ; arg 0
    call assert
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [REL heap] ; get heap
    mov r10, 0
    cmp rbx, r10
    je L5
    mov rbx, 1
    jmp L6
    L5:
    mov rbx, 0
    L6:
    mov rcx, rbx ; arg 0
    call assert
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [REL heap] ; get heap
    mov rcx, rbx ; arg 0
    mov rbx, 0
    mov rdx, rbx ; arg 1
    mov rbx, QWORD [rsp + 6 * 8] ; get ptr
    mov r8, rbx ; arg 2
    call HeapFree
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    ; Default return
    add rsp, 8
    xor rax, rax
    ret
    
assert:
    mov QWORD [rsp + 1 * 8], rcx
    sub rsp, 0 * 8 + 8; 0 vars + alignment
    mov rbx, QWORD [rsp + 2 * 8] ; get expression
    test rbx, rbx
    jne L_lnot_false_7
    mov rbx, 1
    jmp L_lnot_exit_7
    L_lnot_false_7:
    mov rbx, 0
    L_lnot_exit_7:
    cmp rbx, 0
    je L_exit8
        sub rsp, 32 ; shadow space
        mov rbx, 1
        mov rcx, rbx ; arg 0
        call ExitProcess
        add rsp, 4 * 8
        mov rbx, rax ; get return value
    L_exit8:
    ; Default return
    add rsp, 8
    xor rax, rax
    ret
    
print:
    mov QWORD [rsp + 1 * 8], rcx
    mov QWORD [rsp + 2 * 8], rdx
    sub rsp, 2 * 8 + 8; 2 vars + alignment
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [REL STD_OUTPUT_HANDLE] ; get STD_OUTPUT_HANDLE
    mov rcx, rbx ; arg 0
    call GetStdHandle
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    mov QWORD [rsp + 0 * 8], rbx; initialize std_handle
    mov QWORD [rsp + 1 * 8], 0; zero initialize bytes_written
    sub rsp, 32 + 1 * 8 + 8 ; shadow space + spill arguments + alignment
    mov rbx, QWORD [rsp + 6 * 8] ; get std_handle
    mov rcx, rbx ; arg 0
    mov rbx, QWORD [rsp + 10 * 8] ; get str
    mov rdx, rbx ; arg 1
    mov rbx, QWORD [rsp + 11 * 8] ; get str_len
    mov r8, rbx ; arg 2
    lea rbx, QWORD [rsp + 7 * 8] ; addrof bytes_written
    mov r9, rbx ; arg 3
    mov rbx, 0
    mov QWORD [RSP + 4 * 8], rbx ; arg 4
    call WriteFile
    add rsp, 6 * 8
    mov rbx, rax ; get return value
    ; Default return
    add rsp, 24
    xor rax, rax
    ret
    
main:
    sub rsp, 2 * 8 + 8; 2 vars + alignment
    sub rsp, 32 ; shadow space
    mov rbx, 8
    mov rcx, rbx ; arg 0
    call malloc
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    mov QWORD [rsp + 0 * 8], rbx; initialize mem
    mov rbx, 66
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 0
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 114
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 1
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 117
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 2
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 104
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 3
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 84
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 4
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 101
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 5
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 115
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 6
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 116
    mov r10, QWORD [rsp + 0 * 8] ; get mem
    mov r11, 7
    add r10, r11
    mov QWORD [r10], rbx
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rsp + 4 * 8] ; get mem
    mov rcx, rbx ; arg 0
    mov rbx, 8
    mov rdx, rbx ; arg 1
    call print
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rsp + 4 * 8] ; get mem
    mov rcx, rbx ; arg 0
    call free
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    sub rsp, 32 ; shadow space
    mov rbx, 8
    mov rcx, rbx ; arg 0
    call malloc
    add rsp, 4 * 8
    mov rbx, rax ; get return value
    mov QWORD [rsp + 1 * 8], rbx; initialize mem2
    mov rbx, 1
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 0
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 2
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 1
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 3
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 2
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 4
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 3
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 0
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 4
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 0
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 5
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 0
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 6
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, 0
    mov r10, QWORD [rsp + 1 * 8] ; get mem2
    mov r11, 7
    add r10, r11
    mov QWORD [r10], rbx
    mov rbx, QWORD [rsp + 1 * 8] ; get mem2
    mov rbx, QWORD [rbx]
    mov rax, rbx ; return via rax
    add rsp, 24
    ret
    ; Default return
    add rsp, 24
    xor rax, rax
    ret
    
SECTION .data
heap dq 0
STD_OUTPUT_HANDLE dq -11

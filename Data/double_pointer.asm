; Generated by Lang compiler

GLOBAL main

SECTION .code
abc:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 32 ; reserve stack space for 3 locals
    lea rbx, QWORD [rbp + 16] ; addrof a
    lea r10, QWORD [rbp + -32] ; get address of 'ptr_a'
    mov QWORD [r10], rbx
    
    lea rbx, QWORD [rbp + 24] ; addrof b
    lea r10, QWORD [rbp + -24] ; get address of 'ptr_b'
    mov QWORD [r10], rbx
    
    lea rbx, QWORD [rbp + -32] ; addrof ptr_a
    lea r10, QWORD [rbp + -16] ; get address of 'ptr_ptr'
    mov QWORD [r10], rbx
    
    mov rbx, QWORD [rbp + -16]
    mov r10, QWORD [rbp + -24]
    mov QWORD [rbx], r10
    
    mov rbx, QWORD [rbp + -16]
    mov rbx, QWORD [rbx]
    movsx rbx, DWORD [rbx]
    mov rax, rbx ; return via rax
    jmp L_function_abc_exit
    
    xor rax, rax ; Default return value 0
    L_function_abc_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve shadow space and 2 arguments
    mov rbx, 1
    mov rcx, rbx ; arg 0
    mov rbx, 2
    mov rdx, rbx ; arg 1
    call abc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data

; Generated by Lang compiler

GLOBAL main

SECTION .code
factorial_recursive:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 0 ; reserve stack space for locals
    mov rbx, QWORD [rbp + 16] ; get value of n
    mov r10, 0
    cmp rbx, r10
    jne L0
    mov rbx, 1
    jmp L1
    L0:
    mov rbx, 0
    L1:
    cmp rbx, 0
    je L_exit2
        mov rbx, 1
        mov rax, rbx ; return via rax
        jmp L_function_factorial_recursive_exit
    L_exit2:
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rbp + 16] ; get value of n
    mov r10, 1
    sub rbx, r10
    mov rcx, rbx ; arg 0
    call factorial_recursive
    mov rbx, rax ; get return value
    mov r10, QWORD [rbp + 16] ; get value of n
    imul r10, rbx
    mov rax, r10 ; return via rax
    jmp L_function_factorial_recursive_exit
    xor rax, rax ; Default return value 0
    L_function_factorial_recursive_exit:
    mov rsp, rbp
    pop rbp
    ret
    
factorial_loop:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for locals
    mov rbx, 1
    mov QWORD [rbp + -8], rbx; initialize result
    L_loop3:
    mov rbx, QWORD [rbp + 16] ; get value of n
    mov r10, 0
    cmp rbx, r10
    jle L4
    mov rbx, 1
    jmp L5
    L4:
    mov rbx, 0
    L5:
    cmp rbx, 0
    je L_exit3
        mov rbx, QWORD [rbp + -8] ; get value of result
        mov r10, QWORD [rbp + 16] ; get value of n
        imul rbx, r10
        lea r10, QWORD [rbp + -8] ; get address of result
        mov QWORD [r10], rbx
        mov rbx, QWORD [rbp + 16] ; get value of n
        mov r10, 1
        sub rbx, r10
        lea r10, QWORD [rbp + 16] ; get address of n
        mov QWORD [r10], rbx
    jmp L_loop3
    L_exit3:
    mov rbx, QWORD [rbp + -8] ; get value of result
    mov rax, rbx ; return via rax
    jmp L_function_factorial_loop_exit
    xor rax, rax ; Default return value 0
    L_function_factorial_loop_exit:
    mov rsp, rbp
    pop rbp
    ret
    
main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve stack space for locals
    mov rbx, 5
    mov QWORD [rbp + -8], rbx; initialize arg
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rbp + -8] ; get value of arg
    mov rcx, rbx ; arg 0
    call factorial_recursive
    mov rbx, rax ; get return value
    mov QWORD [rbp + -16], rbx; initialize a
    sub rsp, 32 ; shadow space
    mov rbx, QWORD [rbp + -8] ; get value of arg
    mov rcx, rbx ; arg 0
    call factorial_loop
    mov rbx, rax ; get return value
    mov QWORD [rbp + -24], rbx; initialize b
    mov rbx, QWORD [rbp + -16] ; get value of a
    mov r10, QWORD [rbp + -24] ; get value of b
    cmp rbx, r10
    jne L6
    mov rbx, 1
    jmp L7
    L6:
    mov rbx, 0
    L7:
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    
SECTION .data

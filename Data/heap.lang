extern GetProcessHeap() -> void *;
extern HeapAlloc(heap: void *, flags: int, size: int)   -> void *;
extern HeapFree (heap: void *, flags: int, ptr: void *) -> void;

extern GetStdHandle(std_handle: int) -> void *;
extern WriteFile(handle: void *, buffer: void *, bytes_to_write: int, bytes_written: int *, overlapped: int) -> bool;

extern ExitProcess(exit_code: int) -> void;

let NULL: void * = 0;

let heap: void *;

func malloc(size: int) -> void * {
	if (heap == NULL) {
		heap = GetProcessHeap();
	}
	
	return HeapAlloc(heap, 0, size);
}

func free(ptr: int *) -> void {
	assert(ptr  != NULL);
	assert(heap != NULL);
	
	HeapFree(heap, 0, ptr);
}

func assert(expression: bool) -> void {
	if (!expression) {
		ExitProcess(1);
	}
}

let STD_OUTPUT_HANDLE: int = -11;

func print(str: char *, str_len: int) -> void {
	let std_handle: void * = GetStdHandle(STD_OUTPUT_HANDLE);

	let bytes_written: int;
	WriteFile(std_handle, str, str_len, &bytes_written, 0);
}

func strlen(str: char *) -> int {
	let len: int = 0;
	
	while (*(str + len) != 0) len = len + 1;
	
	return len;
}

func main() -> int {
	let mem: char * = malloc(9);
	
	*(mem + 0) = 'B';
	*(mem + 1) = 'r';
	*(mem + 2) = 'u';
	*(mem + 3) = 'h';
	*(mem + 4) = 'T';
	*(mem + 5) = 'e';
	*(mem + 6) = 's';
	*(mem + 7) = 't';
	*(mem + 8) = 0;

	let str_len: int = strlen(mem);

	print(mem, str_len);
	free(mem);

	let mem2: char * = malloc(9);

	*(mem2 + 0) = 1;
	*(mem2 + 1) = 2;
	*(mem2 + 2) = 3;
	*(mem2 + 3) = 4;
	*(mem2 + 4) = 0;
	*(mem2 + 5) = 0;
	*(mem2 + 6) = 0;
	*(mem2 + 7) = 0;

	return *mem2; // 0x04030201 (little endian) = 67305985
}

; Generated by Lang compiler

GLOBAL main

SECTION .code
main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 3 locals
    lea rbx, QWORD [rbp + -16] ; get address of 'a'
    mov r10, 48
    mov DWORD [rbx], r10d
    
    lea rbx, QWORD [rbp + -12] ; get address of 'b'
    mov r10, 3
    mov DWORD [rbx], r10d
    
    movsx rbx, DWORD [rbp + -16]
    movsx r10, DWORD [rbp + -12]
    mov rax, rbx
    cdq
    idiv r10
    mov rbx, rax
    lea r10, QWORD [rbp + -8] ; get address of 'c'
    mov DWORD [r10], ebx
    
    movsx rbx, DWORD [rbp + -8]
    mov r10, 16
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit0
        mov rbx, 0
        mov rax, rbx ; return via rax
        jmp L_function_main_exit
        
    L_exit0:
    
    lea rbx, QWORD [rbp + -12] ; get address of 'b'
    mov r10, 4
    mov DWORD [rbx], r10d
    
    movsx rbx, DWORD [rbp + -8]
    movsx r10, DWORD [rbp + -12]
    mov rax, rbx
    cdq
    idiv r10
    mov rbx, rax
    lea r10, QWORD [rbp + -8] ; get address of 'c'
    mov DWORD [r10], ebx
    
    movsx rbx, DWORD [rbp + -8]
    mov r10, 4
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit1
        mov rbx, 0
        mov rax, rbx ; return via rax
        jmp L_function_main_exit
        
    L_exit1:
    
    movsx rbx, DWORD [rbp + -8]
    movsx r10, DWORD [rbp + -8]
    mov rax, rbx
    cdq
    idiv r10
    mov rbx, rax
    lea r10, QWORD [rbp + -8] ; get address of 'c'
    mov DWORD [r10], ebx
    
    movsx rbx, DWORD [rbp + -8]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data

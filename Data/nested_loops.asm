; Generated by Lang compiler

GLOBAL main

SECTION .code
main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 4 locals
    mov rbx, 0
    lea r10, QWORD [rbp + -16] ; get address of 'num_primes'
    mov DWORD [r10], ebx
    mov rbx, 2
    lea r10, QWORD [rbp + -12] ; get address of 'i'
    mov DWORD [r10], ebx
    L_loop0:
    mov rbx, 1
    cmp rbx, 0
    je L_exit0
        mov rbx, 1
        lea r10, QWORD [rbp + -8] ; get address of 'i_is_prime'
        mov BYTE [r10], bl
        mov rbx, 2
        lea r10, QWORD [rbp + -4] ; get address of 'j'
        mov DWORD [r10], ebx
        L_loop1:
        movsx rbx, DWORD [rbp + -4] ; get value of 'j'
        movsx r10, DWORD [rbp + -12] ; get value of 'i'
        cmp rbx, r10
        jge L2
        mov rbx, 1
        jmp L3
        L2:
        mov rbx, 0
        L3:
        cmp rbx, 0
        je L_exit1
            movsx rbx, DWORD [rbp + -12] ; get value of 'i'
            movsx r10, DWORD [rbp + -4] ; get value of 'j'
            mov rax, rbx
            cdq
            idiv r10
            mov rbx, rdx
            mov r10, 0
            cmp rbx, r10
            jne L4
            mov rbx, 1
            jmp L5
            L4:
            mov rbx, 0
            L5:
            cmp rbx, 0
            je L_exit6
                lea rbx, QWORD [rbp + -8] ; get address of 'i_is_prime'
                mov r10, 0
                mov BYTE [rbx], r10b
                jmp L_exit1
            L_exit6:
            movsx rbx, DWORD [rbp + -4] ; get value of 'j'
            mov r10, 1
            add rbx, r10
            lea r10, QWORD [rbp + -4] ; get address of 'j'
            mov DWORD [r10], ebx
        jmp L_loop1
        L_exit1:
        movsx rbx, BYTE [rbp + -8] ; get value of 'i_is_prime'
        cmp rbx, 0
        je L_exit7
            sub rsp, 32 ; reserve shadow space and 1 arguments
            movsx rbx, DWORD [rbp + -12] ; get value of 'i'
            mov rcx, rbx ; arg 0
            call print_num
            add rsp, 32 ; pop arguments
            mov rbx, rax ; get return value
            movsx rbx, DWORD [rbp + -16] ; get value of 'num_primes'
            mov r10, 1
            add rbx, r10
            lea r10, QWORD [rbp + -16] ; get address of 'num_primes'
            mov DWORD [r10], ebx
            movsx rbx, DWORD [rbp + -16] ; get value of 'num_primes'
            movsx r10, DWORD [REL N] ; get value of 'N'
            cmp rbx, r10
            jne L8
            mov rbx, 1
            jmp L9
            L8:
            mov rbx, 0
            L9:
            cmp rbx, 0
            je L_exit10
                jmp L_exit0
            L_exit10:
        L_exit7:
        movsx rbx, DWORD [rbp + -12] ; get value of 'i'
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -12] ; get address of 'i'
        mov DWORD [r10], ebx
    jmp L_loop0
    L_exit0:
    movsx rbx, DWORD [rbp + -12] ; get value of 'i'
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    
EXTERN GetStdHandle

EXTERN WriteFile

print:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 16 ; reserve stack space for 2 locals
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, -11
    mov rcx, rbx ; arg 0
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    mov DWORD [rbp + -8], 0 ; zero initialize bytes_written
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16] ; get value of 'std_handle'
    mov rcx, rbx ; arg 0
    mov rbx, QWORD [rbp + 16] ; get value of 'str'
    mov rdx, rbx ; arg 1
    movsx rbx, DWORD [rbp + 24] ; get value of 'str_len'
    mov r8, rbx ; arg 2
    lea rbx, QWORD [rbp + -8] ; addrof bytes_written
    mov r9, rbx ; arg 3
    mov rbx, 0
    mov QWORD [rsp + 32], rbx ; arg 4
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    xor rax, rax ; Default return value 0
    L_function_print_exit:
    mov rsp, rbp
    pop rbp
    ret
    
print_num:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    sub rsp, 32 ; reserve stack space for 5 locals
    lea rbx, [REL str_lit_1]
    lea r10, QWORD [rbp + -32] ; get address of 'num_str'
    mov QWORD [r10], rbx
    mov rbx, 0
    lea r10, QWORD [rbp + -24] ; get address of 'idx'
    mov DWORD [r10], ebx
    L_loop11:
    movsx rbx, DWORD [rbp + 16] ; get value of 'num'
    mov r10, 0
    cmp rbx, r10
    jle L12
    mov rbx, 1
    jmp L13
    L12:
    mov rbx, 0
    L13:
    cmp rbx, 0
    je L_exit11
        lea rbx, QWORD [rbp + -20] ; get address of 'digit'
        movsx r10, DWORD [rbp + 16] ; get value of 'num'
        mov r11, 10
        mov rax, r10
        cdq
        idiv r11
        mov r10, rdx
        and r10, 0xff
        mov BYTE [rbx], r10b
        mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
        movsx r10, DWORD [rbp + -24] ; get value of 'idx'
        add rbx, r10
        movsx r10, BYTE [rbp + -20] ; get value of 'digit'
        mov r11, 48
        add r10, r11
        mov BYTE [rbx], r10b
        movsx rbx, DWORD [rbp + 16] ; get value of 'num'
        mov r10, 10
        mov rax, rbx
        cdq
        idiv r10
        mov rbx, rax
        lea r10, QWORD [rbp + 16] ; get address of 'num'
        mov DWORD [r10], ebx
        movsx rbx, DWORD [rbp + -24] ; get value of 'idx'
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -24] ; get address of 'idx'
        mov DWORD [r10], ebx
    jmp L_loop11
    L_exit11:
    mov rbx, 0
    lea r10, QWORD [rbp + -16] ; get address of 'i'
    mov DWORD [r10], ebx
    L_loop14:
    movsx rbx, DWORD [rbp + -24] ; get value of 'idx'
    mov r10, 2
    mov rax, rbx
    cdq
    idiv r10
    mov rbx, rax
    movsx r10, DWORD [rbp + -16] ; get value of 'i'
    cmp r10, rbx
    jge L15
    mov r10, 1
    jmp L16
    L15:
    mov r10, 0
    L16:
    cmp r10, 0
    je L_exit14
        mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
        movsx r10, DWORD [rbp + -16] ; get value of 'i'
        add rbx, r10
        movsx rbx, BYTE [rbx]
        lea r10, QWORD [rbp + -12] ; get address of 'tmp'
        mov BYTE [r10], bl
        mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
        movsx r10, DWORD [rbp + -24] ; get value of 'idx'
        add rbx, r10
        movsx r10, DWORD [rbp + -16] ; get value of 'i'
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movsx rbx, BYTE [rbx]
        mov r10, QWORD [rbp + -32] ; get value of 'num_str'
        movsx r11, DWORD [rbp + -16] ; get value of 'i'
        add r10, r11
        mov BYTE [r10], bl
        mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
        movsx r10, DWORD [rbp + -24] ; get value of 'idx'
        add rbx, r10
        movsx r10, DWORD [rbp + -16] ; get value of 'i'
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movsx r10, BYTE [rbp + -12] ; get value of 'tmp'
        mov BYTE [rbx], r10b
        movsx rbx, DWORD [rbp + -16] ; get value of 'i'
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -16] ; get address of 'i'
        mov DWORD [r10], ebx
    jmp L_loop14
    L_exit14:
    mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
    movsx r10, DWORD [rbp + -24] ; get value of 'idx'
    add rbx, r10
    mov r10, 44
    mov BYTE [rbx], r10b
    mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
    movsx r10, DWORD [rbp + -24] ; get value of 'idx'
    add rbx, r10
    mov r10, 1
    add rbx, r10
    mov r10, 32
    mov BYTE [rbx], r10b
    sub rsp, 32 ; reserve shadow space and 2 arguments
    mov rbx, QWORD [rbp + -32] ; get value of 'num_str'
    mov rcx, rbx ; arg 0
    movsx rbx, DWORD [rbp + -24] ; get value of 'idx'
    mov r10, 2
    add rbx, r10
    mov rdx, rbx ; arg 1
    call print
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    xor rax, rax ; Default return value 0
    L_function_print_num_exit:
    mov rsp, rbp
    pop rbp
    ret
    
SECTION .data
N dq 100
str_lit_1 db "         ", 0

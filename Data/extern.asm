; Generated by Lang compiler

GLOBAL main

SECTION .code
EXTERN GetStdHandle

EXTERN WriteFile

EXTERN strlen

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for locals
    sub rsp, 32 ; reserve space for call arguments
    movsx rbx, DWORD [REL STD_OUTPUT_HANDLE] ; get value of STD_OUTPUT_HANDLE
    mov rcx, rbx ; arg 0
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov QWORD [rbp + -8], rbx; initialize std_handle
    sub rsp, 32 ; reserve space for call arguments
    lea rbx, QWORD [REL string] ; get address of string
    mov rcx, rbx ; arg 0
    call strlen
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov DWORD [rbp + -12], ebx; initialize str_len
    mov DWORD [rbp + -16], 0; zero initialize bytes_written
    sub rsp, 48 ; reserve space for call arguments
    mov rbx, QWORD [rbp + -8] ; get value of std_handle
    mov rcx, rbx ; arg 0
    lea rbx, QWORD [REL string] ; get address of string
    mov rdx, rbx ; arg 1
    movsx rbx, DWORD [rbp + -12] ; get value of str_len
    mov r8, rbx ; arg 2
    lea rbx, QWORD [rbp + -16] ; addrof bytes_written
    mov r9, rbx ; arg 3
    mov rbx, 0
    mov QWORD [rsp + 32], rbx ; arg 4
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    movsx rbx, DWORD [rbp + -16] ; get value of bytes_written
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    
SECTION .data
STD_OUTPUT_HANDLE dq -11
string db "Hallo wereld!", 0

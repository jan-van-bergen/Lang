; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov rcx, rax
    call main
    mov ecx, eax
    call ExitProcess

extern GetStdHandle

extern WriteFile

extern strlen

; let STD_OUTPUT_HANDLE: i32; STD_OUTPUT_HANDLE = -11;

; let string: u8*; string = "Hallo wereld!";

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 3 locals
    
    ; let std_handle: void*; std_handle = GetStdHandle(STD_OUTPUT_HANDLE);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    movsx rbx, DWORD [REL STD_OUTPUT_HANDLE]
    mov rcx, rbx ; arg 1
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    
    ; let str_len: i32; str_len = strlen(string);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    lea rbx, QWORD [REL string] ; get address of 'string'
    mov rcx, rbx ; arg 1
    call strlen
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -8] ; get address of 'str_len'
    mov DWORD [r10], ebx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -4], 0 ; zero initialize 'bytes_written'
    
    ; WriteFile(std_handle, string, str_len, &bytes_written, 0)
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16]
    mov rcx, rbx ; arg 1
    lea rbx, QWORD [REL string] ; get address of 'string'
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + -8]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -4] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov DWORD [rsp + 32], ebx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    
    ; return bytes_written
    movsx rbx, DWORD [rbp + -4]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data
STD_OUTPUT_HANDLE dq -11
string db "Hallo wereld!", 0

; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov rcx, rax
    call main
    mov ecx, eax
    call ExitProcess

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve stack space for 3 locals
    
    ; let var: u32; var = 5678;
    lea rbx, QWORD [rbp + -32] ; get address of 'var'
    mov r10, 5678
    mov DWORD [rbx], r10d
    
    ; let a: Struct;
    lea rdi, QWORD [rbp + -28] ; zero initialize 'a'
    xor rax, rax
    mov ecx, 8
    rep stosb
    
    ; a.fst = 1234
    lea rbx, QWORD [rbp + -28] ; get address of 'a'
    add rbx, 0 ; member offset 'fst'
    mov r10, 1234
    mov DWORD [rbx], r10d
    
    ; a.snd = var
    lea rbx, QWORD [rbp + -28] ; get address of 'a'
    add rbx, 4 ; member offset 'snd'
    mov r10d, DWORD [rbp + -32]
    mov DWORD [rbx], r10d
    
    ; let b: Struct; b = a;
    lea rbx, QWORD [rbp + -20] ; get address of 'b'
    lea r10, QWORD [rbp + -28] ; get address of 'a'
    mov rdi, rbx
    mov rsi, r10
    mov ecx, 8
    rep movsb
    
    ; return b.snd
    lea rbx, QWORD [rbp + -20] ; get address of 'b'
    add rbx, 4 ; member offset 'snd'
    movsx rbx, DWORD [rbx]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data

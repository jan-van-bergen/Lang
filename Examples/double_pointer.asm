; Generated by Lang compiler

GLOBAL _start

extern GetCommandLineA
extern ExitProcess

SECTION .code
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

abc:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 32 ; reserve stack space for 3 locals
    
    ; let ptr_a: i32*; ptr_a = &a;
    lea rbx, QWORD [rbp + 16] ; get address of 'a'
    lea r10, QWORD [rbp + -32] ; get address of 'ptr_a'
    mov QWORD [r10], rbx
    
    ; let ptr_b: i32*; ptr_b = &b;
    lea rbx, QWORD [rbp + 24] ; get address of 'b'
    lea r10, QWORD [rbp + -24] ; get address of 'ptr_b'
    mov QWORD [r10], rbx
    
    ; let ptr_ptr: i32**; ptr_ptr = &ptr_a;
    lea rbx, QWORD [rbp + -32] ; get address of 'ptr_a'
    lea r10, QWORD [rbp + -16] ; get address of 'ptr_ptr'
    mov QWORD [r10], rbx
    
    ; *ptr_ptr = ptr_b
    mov rbx, QWORD [rbp + -16]
    mov r10, QWORD [rbp + -24]
    mov QWORD [rbx], r10
    
    ; return **ptr_ptr
    mov rbx, QWORD [rbp + -16]
    mov rbx, QWORD [rbx]
    movsx rbx, DWORD [rbx]
    mov rax, rbx ; return via rax
    jmp L_function_abc_exit
    
    xor rax, rax ; Default return value 0
    L_function_abc_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    
    ; return abc(1, 2)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    mov rbx, 1
    mov rcx, rbx ; arg 1
    mov rbx, 2
    mov rdx, rbx ; arg 2
    call abc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data

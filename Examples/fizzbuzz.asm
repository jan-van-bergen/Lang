; Generated by Lang compiler

GLOBAL _start

extern GetCommandLineA
extern ExitProcess

SECTION .code
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

EXTERN GetStdHandle

EXTERN WriteFile

EXTERN strlen

; let STD_OUTPUT_HANDLE: i32; STD_OUTPUT_HANDLE = -11;

print:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 16 ; reserve stack space for 2 locals
    
    ; let std_handle: i32*; std_handle = GetStdHandle(STD_OUTPUT_HANDLE);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    movsx rbx, DWORD [REL STD_OUTPUT_HANDLE]
    mov rcx, rbx ; arg 1
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -8], 0 ; zero initialize 'bytes_written'
    
    ; WriteFile(std_handle, str, str_len, &bytes_written, 0)
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16]
    mov rcx, rbx ; arg 1
    mov rbx, QWORD [rbp + 16]
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + 24]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -8] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov QWORD [rsp + 32], rbx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_exit:
    mov rsp, rbp
    pop rbp
    ret
    

print_num:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    sub rsp, 32 ; reserve stack space for 5 locals
    
    ; let num_str: u8*; num_str = "         ";
    lea rbx, QWORD [rbp + -32] ; get address of 'num_str'
    lea r10, [REL lit_str_1]
    mov QWORD [rbx], r10
    
    ; let idx: i32; idx = 0;
    lea rbx, QWORD [rbp + -24] ; get address of 'idx'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (num > 0)
    L_loop0:
    movsx rbx, DWORD [rbp + 16]
    mov r10, 0
    cmp rbx, r10
    setg bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit0
        ; let digit: u8; digit = cast(u8) num % 10;
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rdx
        lea r10, QWORD [rbp + -20] ; get address of 'digit'
        mov BYTE [r10], bl
        
        ; *(num_str + idx) = digit + 48
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movzx r10, BYTE [rbp + -20]
        mov r11, 48
        add r10, r11
        mov BYTE [rbx], r10b
        
        ; num = num / 10
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rax
        lea r10, QWORD [rbp + 16] ; get address of 'num'
        mov DWORD [r10], ebx
        
        ; idx = idx + 1
        movsx rbx, DWORD [rbp + -24]
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -24] ; get address of 'idx'
        mov DWORD [r10], ebx
        
    jmp L_loop0
    L_exit0:
    
    ; let i: i32; i = 0;
    lea rbx, QWORD [rbp + -16] ; get address of 'i'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (i < idx / 2)
    L_loop1:
    movsx rbx, DWORD [rbp + -24]
    mov r10, 2
    mov rax, rbx
    cqo
    idiv r10
    mov rbx, rax
    movsx r10, DWORD [rbp + -16]
    cmp r10, rbx
    setl r10b
    and r10b, 1
    movzx r10, r10b
    cmp r10, 0
    je L_exit1
        ; let tmp: u8; tmp = *(num_str + i);
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -16]
        add rbx, r10
        movzx rbx, BYTE [rbx]
        lea r10, QWORD [rbp + -12] ; get address of 'tmp'
        mov BYTE [r10], bl
        
        ; *(num_str + i) = *(num_str + idx - i - 1)
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movsx r10, DWORD [rbp + -16]
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movzx rbx, BYTE [rbx]
        mov r10, QWORD [rbp + -32]
        movsx r11, DWORD [rbp + -16]
        add r10, r11
        mov BYTE [r10], bl
        
        ; *(num_str + idx - i - 1) = tmp
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movsx r10, DWORD [rbp + -16]
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movzx r10, BYTE [rbp + -12]
        mov BYTE [rbx], r10b
        
        ; i++
        lea rbx, QWORD [rbp + -16] ; get address of 'i'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
    jmp L_loop1
    L_exit1:
    
    ; *(num_str + idx) = 32
    mov rbx, QWORD [rbp + -32]
    movsx r10, DWORD [rbp + -24]
    add rbx, r10
    mov r10, 32
    mov BYTE [rbx], r10b
    
    ; print(num_str, idx + 1)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    mov rbx, QWORD [rbp + -32]
    mov rcx, rbx ; arg 1
    movsx rbx, DWORD [rbp + -24]
    mov r10, 1
    add rbx, r10
    mov rdx, rbx ; arg 2
    call print
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_num_exit:
    mov rsp, rbp
    pop rbp
    ret
    

fizzbuzz:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 3 locals
    
    ; let i: i32; i = 1;
    lea rbx, QWORD [rbp + -16] ; get address of 'i'
    mov r10, 1
    mov DWORD [rbx], r10d
    
    ; while (i <= n)
    L_loop2:
    movsx rbx, DWORD [rbp + -16]
    movsx r10, DWORD [rbp + 16]
    cmp rbx, r10
    setle bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit2
        ; let divisible_by_3: bool; divisible_by_3 = i % 3 == 0;
        movsx rbx, DWORD [rbp + -16]
        mov r10, 3
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rdx
        mov r10, 0
        cmp rbx, r10
        sete bl
        and bl, 1
        movzx rbx, bl
        lea r10, QWORD [rbp + -12] ; get address of 'divisible_by_3'
        mov BYTE [r10], bl
        
        ; let divisible_by_5: bool; divisible_by_5 = i % 5 == 0;
        movsx rbx, DWORD [rbp + -16]
        mov r10, 5
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rdx
        mov r10, 0
        cmp rbx, r10
        sete bl
        and bl, 1
        movzx rbx, bl
        lea r10, QWORD [rbp + -11] ; get address of 'divisible_by_5'
        mov BYTE [r10], bl
        
        ; if (divisible_by_5 && divisible_by_3)
        movzx rbx, BYTE [rbp + -11]
        test rbx, rbx
        je L_land_false_3 ; short circuit '&&'
        movzx r10, BYTE [rbp + -12]
        test r10, r10
        je L_land_false_3
        mov rbx, 1
        jmp L_land_exit_3
        L_land_false_3:
        mov rbx, 0
        L_land_exit_3:
        cmp rbx, 0
        ; else
        je L_else4
            ; print("fizzbuzz ", 9)
            sub rsp, 32 ; reserve shadow space and 2 arguments
            lea rbx, [REL lit_str_2]
            mov rcx, rbx ; arg 1
            mov rbx, 9
            mov rdx, rbx ; arg 2
            call print
            add rsp, 32 ; pop arguments
            mov rbx, rax ; get return value
            
        jmp L_exit4
        L_else4:
            ; if (divisible_by_5)
            movzx rbx, BYTE [rbp + -11]
            cmp rbx, 0
            ; else
            je L_else5
                ; print("fizz ", 5)
                sub rsp, 32 ; reserve shadow space and 2 arguments
                lea rbx, [REL lit_str_3]
                mov rcx, rbx ; arg 1
                mov rbx, 5
                mov rdx, rbx ; arg 2
                call print
                add rsp, 32 ; pop arguments
                mov rbx, rax ; get return value
                
            jmp L_exit5
            L_else5:
                ; if (divisible_by_3)
                movzx rbx, BYTE [rbp + -12]
                cmp rbx, 0
                ; else
                je L_else6
                    ; print("buzz ", 5)
                    sub rsp, 32 ; reserve shadow space and 2 arguments
                    lea rbx, [REL lit_str_4]
                    mov rcx, rbx ; arg 1
                    mov rbx, 5
                    mov rdx, rbx ; arg 2
                    call print
                    add rsp, 32 ; pop arguments
                    mov rbx, rax ; get return value
                    
                jmp L_exit6
                L_else6:
                    ; print_num(i)
                    sub rsp, 32 ; reserve shadow space and 1 arguments
                    movsx rbx, DWORD [rbp + -16]
                    mov rcx, rbx ; arg 1
                    call print_num
                    add rsp, 32 ; pop arguments
                    mov rbx, rax ; get return value
                    
                L_exit6:
                
            L_exit5:
            
        L_exit4:
        
        ; i++
        lea rbx, QWORD [rbp + -16] ; get address of 'i'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
    jmp L_loop2
    L_exit2:
    
    xor rax, rax ; Default return value 0
    L_function_fizzbuzz_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    
    ; fizzbuzz(20)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, 20
    mov rcx, rbx ; arg 1
    call fizzbuzz
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data
STD_OUTPUT_HANDLE dq -11
lit_str_1 db "         ", 0
lit_str_2 db "fizzbuzz ", 0
lit_str_3 db "fizz ", 0
lit_str_4 db "buzz ", 0

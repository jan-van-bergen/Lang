extern OpenFile(
	lpFileName   : char *,
	lpReOpenBuff : void *,
	uStyle       : u32       
) -> void *;

extern WriteFile(
	handle         : void *,
	buffer         : void *,
	bytes_to_write : int,
	bytes_written  : int *,
	overlapped     : int
) -> bool;

extern CloseHandle(handle: void *) -> void;

extern strlen(str: char *) -> u64;

let NULL: void * = 0;

let GENERIC_WRITE         : int = 0x40000000;
let CREATE_NEW            : int = 1;
let FILE_ATTRIBUTE_NORMAL : int = 0x00000080;

let OF_CREATE : u32 = 0x00001000;
let OF_READ   : u32 = 0x00000000;

func main() -> int {
	let file_name: char * = "TEST.TXT";

	struct OFSTRUCT {
		cBytes:     u8;
		fFixedDisk: u8;
		nErrCode:   u16;
		Reserved1:  u16;
		Reserved2:  u16;
		szPathName: char[128];
	}
	let ofstruct: OFSTRUCT;

	// Open the file
	let file_handle: void * = OpenFile(file_name, &ofstruct, OF_CREATE | OF_READ);
	if (file_handle == cast(void *) -1) return -1;

	// Get the path from the OFSTRUCT
	let path:     char * = ofstruct.szPathName; // Array decays to pointer
	let path_len: int    = cast(int) strlen(path);

	// Write its path to the file
	let bytes_written: int;
	let err: bool = WriteFile( 
		file_handle,
		path,
		path_len,
		&bytes_written,
		0
	);

	CloseHandle(file_handle);

	if (err == false) return -1;

	return 0;
}

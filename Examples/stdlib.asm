; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global malloc

global free

global exit

global assert

global strlen

global puts

global print_num

extern GetProcessHeap

extern HeapAlloc

extern HeapFree

extern GetStdHandle

extern WriteFile

extern ExitProcess

; let NULL: void*; NULL = 0;

; let heap: void*;

malloc:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    
    ; if (heap == NULL)
    mov rbx, QWORD [REL heap]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    sete bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit0
        ; heap = GetProcessHeap()
        sub rsp, 32 ; reserve shadow space and 0 arguments
        call GetProcessHeap
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        lea r10, QWORD [REL heap] ; get address of 'heap'
        mov QWORD [r10], rbx
        
    L_exit0:
    
    ; return HeapAlloc(heap, 0, size)
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [REL heap]
    mov rcx, rbx ; arg 1
    mov rbx, 0
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + 16]
    mov r8, rbx ; arg 3
    call HeapAlloc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov rax, rbx ; return via rax
    jmp L_function_malloc_exit
    
    xor rax, rax ; Default return value 0
    L_function_malloc_exit:
    mov rsp, rbp
    pop rbp
    ret
    

free:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    
    ; assert(ptr != NULL)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + 16]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    mov rcx, rbx ; arg 1
    call assert
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; assert(heap != NULL)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [REL heap]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    mov rcx, rbx ; arg 1
    call assert
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; HeapFree(heap, 0, ptr)
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [REL heap]
    mov rcx, rbx ; arg 1
    mov rbx, 0
    mov rdx, rbx ; arg 2
    mov rbx, QWORD [rbp + 16]
    mov r8, rbx ; arg 3
    call HeapFree
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_free_exit:
    mov rsp, rbp
    pop rbp
    ret
    

exit:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    
    ; ExitProcess(status)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    movsx rbx, DWORD [rbp + 16]
    mov rcx, rbx ; arg 1
    call ExitProcess
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_exit_exit:
    mov rsp, rbp
    pop rbp
    ret
    

assert:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov BYTE [rbp + 16], cl ; push arg 0 
    
    ; if (!expression)
    movzx rbx, BYTE [rbp + 16]
    xor rbx, -1
    and rbx, 1
    cmp rbx, 0
    je L_exit2
        ; exit(1)
        sub rsp, 32 ; reserve shadow space and 1 arguments
        mov rbx, 1
        mov rcx, rbx ; arg 1
        call exit
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        
    L_exit2:
    
    xor rax, rax ; Default return value 0
    L_function_assert_exit:
    mov rsp, rbp
    pop rbp
    ret
    

strlen:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 1 locals
    
    ; let start: u8*; start = str;
    lea rbx, QWORD [rbp + -16] ; get address of 'start'
    mov r10, QWORD [rbp + 16]
    mov QWORD [rbx], r10
    
    ; while (*str != ')
    L_loop3:
    mov rbx, QWORD [rbp + 16]
    movzx rbx, BYTE [rbx]
    mov r10, 0
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit3
        ; str++
        lea rbx, QWORD [rbp + 16] ; get address of 'str'
        mov r10, rbx
        mov rbx, QWORD [rbx]
        mov r11, rbx
        inc r11
        mov QWORD [r10], r11
        
    jmp L_loop3
    L_exit3:
    
    ; return str - start
    mov rbx, QWORD [rbp + 16]
    mov r10, QWORD [rbp + -16]
    sub rbx, r10
    mov rax, rbx ; return via rax
    jmp L_function_strlen_exit
    
    xor rax, rax ; Default return value 0
    L_function_strlen_exit:
    mov rsp, rbp
    pop rbp
    ret
    

; let STD_OUTPUT_HANDLE: i32; STD_OUTPUT_HANDLE = -11;

puts:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 3 locals
    
    ; let std_handle: void*; std_handle = GetStdHandle(STD_OUTPUT_HANDLE);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    movsx rbx, DWORD [REL STD_OUTPUT_HANDLE]
    mov rcx, rbx ; arg 1
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    
    ; let len: i32; len = strlen(str);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + 16]
    mov rcx, rbx ; arg 1
    call strlen
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -8] ; get address of 'len'
    mov DWORD [r10], ebx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -4], 0 ; zero initialize 'bytes_written'
    
    ; WriteFile(std_handle, str, len, &bytes_written, 0)
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16]
    mov rcx, rbx ; arg 1
    mov rbx, QWORD [rbp + 16]
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + -8]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -4] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov DWORD [rsp + 32], ebx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_puts_exit:
    mov rsp, rbp
    pop rbp
    ret
    

print_num:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    sub rsp, 48 ; reserve stack space for 4 locals
    
    ; let num_str: u8[32];
    mov QWORD [rbp + -48], 0 ; zero initialize 'num_str'
    
    ; let idx: i32; idx = 0;
    lea rbx, QWORD [rbp + -16] ; get address of 'idx'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; let n: i32; n = num;
    lea rbx, QWORD [rbp + -12] ; get address of 'n'
    movsx r10, DWORD [rbp + 16]
    mov DWORD [rbx], r10d
    
    ; while (true)
    L_loop4:
    mov rbx, 1
    cmp rbx, 0
    je L_exit4
        ; n = n / 10
        movsx rbx, DWORD [rbp + -12]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rax
        lea r10, QWORD [rbp + -12] ; get address of 'n'
        mov DWORD [r10], ebx
        
        ; idx++
        lea rbx, QWORD [rbp + -16] ; get address of 'idx'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
        ; if (n == 0)
        movsx rbx, DWORD [rbp + -12]
        mov r10, 0
        cmp rbx, r10
        sete bl
        and bl, 1
        movzx rbx, bl
        cmp rbx, 0
        je L_exit5
            ; break
            jmp L_exit4
            
        L_exit5:
        
    jmp L_loop4
    L_exit4:
    
    ; num_str[idx--] = '
    lea rbx, QWORD [rbp + -16] ; get address of 'idx'
    mov r10, rbx
    movsx rbx, DWORD [rbx]
    mov r11, rbx
    dec r11
    mov DWORD [r10], r11d
    lea r10, QWORD [rbp + -48] ; get address of 'num_str'
    imul rbx, 1
    add r10, rbx
    mov rbx, 0
    mov BYTE [r10], bl
    
    ; while (true)
    L_loop6:
    mov rbx, 1
    cmp rbx, 0
    je L_exit6
        ; let digit: u8; digit = cast(u8) num % 10;
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rdx
        lea r10, QWORD [rbp + -8] ; get address of 'digit'
        mov BYTE [r10], bl
        
        ; num_str[idx--] = digit + '0'
        lea rbx, QWORD [rbp + -16] ; get address of 'idx'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        dec r11
        mov DWORD [r10], r11d
        lea r10, QWORD [rbp + -48] ; get address of 'num_str'
        imul rbx, 1
        add r10, rbx
        movzx rbx, BYTE [rbp + -8]
        mov r11, 48
        add rbx, r11
        mov BYTE [r10], bl
        
        ; num = num / 10
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rax
        lea r10, QWORD [rbp + 16] ; get address of 'num'
        mov DWORD [r10], ebx
        
        ; if (num == 0)
        movsx rbx, DWORD [rbp + 16]
        mov r10, 0
        cmp rbx, r10
        sete bl
        and bl, 1
        movzx rbx, bl
        cmp rbx, 0
        je L_exit7
            ; break
            jmp L_exit6
            
        L_exit7:
        
    jmp L_loop6
    L_exit6:
    
    ; puts(num_str)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    lea rbx, QWORD [rbp + -48] ; get address of 'num_str'
    mov rcx, rbx ; arg 1
    call puts
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_num_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data
NULL dq 0
heap dq 0
STD_OUTPUT_HANDLE dq -11

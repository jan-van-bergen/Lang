export malloc;
export free;

export exit;
export assert;

export strlen;
export puts;
export print_num;

extern GetProcessHeap() -> void *;
extern HeapAlloc(heap: void *, flags: int, size: int)   -> void *;
extern HeapFree (heap: void *, flags: int, ptr: void *) -> void;

extern GetStdHandle(std_handle: int) -> void *;
extern WriteFile(handle: void *, buffer: void *, bytes_to_write: int, bytes_written: int *, overlapped: void *) -> bool;

extern ExitProcess(exit_code: int) -> void;

let heap: void *;

func malloc(size: int) -> void * {
	if (heap == null) {
		heap = GetProcessHeap();
	}
	
	return HeapAlloc(heap, 0, size);
}

func free(ptr: void *) -> void {
	assert(ptr  != null);
	assert(heap != null);
	
	HeapFree(heap, 0, ptr);
}

func exit(status: int) -> void {
	ExitProcess(status);
}

func assert(expression: bool) -> void {
	if (!expression) {
		puts("*** ASSERTION FAILED ***");
		exit(-1);
	}
}

func strlen(str: char *) -> int {
	let start := str;
	
	while (*str != '\0') str++;
	
	return str - start;
}

let STD_OUTPUT_HANDLE: int = -11;

func puts(str: char *) -> void {
	let std_handle: void * = GetStdHandle(STD_OUTPUT_HANDLE);

	let len := strlen(str);

	let bytes_written: int;
	WriteFile(std_handle, str, len, &bytes_written, null);
}

func print_num(num: int) -> void {
	let num_str: char[32];
	let idx: int = 0;

	 // Calculate required string length
	let n := num;
	while (true) {
		n = n / 10;
		idx++;

		if (n == 0) break;
	}
	
	// Print number in reverse
	num_str[idx--] = '\0';
	
	while (true) {
		let digit: char = cast(char) (num % 10);		
		num_str[idx--] = digit + '0';
		
		num = num / 10;
		if (num == 0) break;
	}
	
	puts(num_str);
}

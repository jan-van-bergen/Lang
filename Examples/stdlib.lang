export malloc;
export calloc;
export free;

export memset;
export memcpy;

export exit;
export assert;

export strlen;
export strcmp;

export putn;
export putc;
export puts;
export print_num;

export fopen;
export fclose;
export fsize;
export fread;
export fwrite;

export rand_seed;
export rand;

extern GetProcessHeap() -> void *;
extern HeapAlloc(heap: void *, flags: int, size: int) -> void *;
extern HeapFree (heap: void *, flags: int, ptr: void *);

extern GetStdHandle(std_handle: int) -> void *;
extern OpenFile(name : char *, ofstruct : void *, style : u32) -> void *;

extern GetFileSize(handle: void *, size_h: int *) -> int;

extern ReadFile (handle: void *, buffer: void *, bytes_to_read : int, bytes_read   : int *, overlapped: void *) -> bool;
extern WriteFile(handle: void *, buffer: void *, bytes_to_write: int, bytes_written: int *, overlapped: void *) -> bool;

extern CloseHandle(handle: void *);

extern QueryPerformanceCounter(counter: u64 *) -> bool;

extern ExitProcess(exit_code: int);

heap: void *;

func malloc(size: int) -> void * {
	if (heap == null) {
		heap = GetProcessHeap();
	}
	
	return HeapAlloc(heap, 0, size);
}

func calloc(size: int) -> void * {
	ptr := malloc(size);
	memset(ptr, 0, size);
	return ptr;
}

func free(ptr: void *) -> void {
	assert(ptr  != null);
	assert(heap != null);
	
	HeapFree(heap, 0, ptr);
}

func memset(ptr: void *, value: u8, size: int) {
	cur := cast(u8 *) ptr;
	end := (cast(u8 *) ptr) + size;
	while (cur < end) {
		*cur++ = value;
	}
}

func memcpy(dst: void *, src: void *, size: int) {
	i := 0;
	while (i++ < size) {
		(cast(char *) dst)[i] = (cast(char *) src)[i];
	}
}

func exit(status: int) {
	ExitProcess(status);
}

func assert(expression: bool) {
	if (!expression) {
		puts("*** ASSERTION FAILED ***");
		exit(-1);
	}
}

func strlen(str: char *) -> int {
	start := str;
	
	while (*str != '\0') str++;
	
	return str - start;
}

func strcmp(a: char *, b: char *) -> int {
	while (true) {
		if (*a != *b) return *a - *b;
		
		if (*a == '\0') return 0;
		
		a++;
		b++;
	}
}

STD_OUTPUT_HANDLE: int = -11;

func putn(str: char *, n: int) {
	std_handle: void * = GetStdHandle(STD_OUTPUT_HANDLE);

	bytes_written: int;
	WriteFile(std_handle, str, n, &bytes_written, null);
}

func putc(c: char) {
	putn(&c, 1);
}

func puts(str: char *) {
	if (str == null) return;

	len := strlen(str);
	putn(str, len);
}

func print_num(num: int) {
	num_str: char[32];
	idx: int = 0;

	 // Calculate required string length
	n := num;
	while (true) {
		n = n / 10;
		idx++;

		if (n == 0) break;
	}
	
	// Print number in reverse
	num_str[idx--] = '\0';
	
	while (true) {
		digit: char = cast(char) (num % 10);		
		num_str[idx--] = digit + '0';
		
		num = num / 10;
		if (num == 0) break;
	}
	
	puts(num_str);
}

OF_CREATE    : u32 = 0x00001000;
OF_READ      : u32 = 0x00000000;
OF_READWRITE : u32 = 0x00000002;

func fopen(name: char *, mode: char *) -> void * {
	struct OFSTRUCT {
		cBytes:     u8;
		fFixedDisk: u8;
		nErrCode:   u16;
		Reserved1:  u16;
		Reserved2:  u16;
		szPathName: char[128];
	}
	ofstruct: OFSTRUCT;
	
	flags : u32;
	
	if (mode[0] == 'r') {
		flags = OF_READ;
	} else if (mode[0] == 'w') {
		flags = OF_READWRITE | OF_CREATE;
	}
	
	return OpenFile(name, &ofstruct, flags);
}

func fclose(handle: void *) {
	CloseHandle(handle);
}

func fsize(handle: void *) -> int {
	return GetFileSize(handle, null);
}

func fread(handle: void *, bytes: char *, num_bytes: int) -> bool {
	num_bytes_read : int;
	return ReadFile(handle, bytes, num_bytes, &num_bytes_read, null);
}

func fwrite(handle: void *, bytes: char *, num_bytes: int) -> bool {
	num_bytes_written : int;
	return WriteFile(handle, bytes, num_bytes, &num_bytes_written, null);
}

func rand_seed() -> u64 {
	seed : u64;
	success := QueryPerformanceCounter(&seed);
	
	if (!success) {
		puts("Call to 'QueryPerformanceCounter' failed!\n");
		exit(-1);
	}
	
	// Wang hash
	seed = (seed ^ 61) ^ (seed >> 16);
	seed = seed * 9;
	seed = seed ^ (seed >> 4);
	seed = seed * 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

func rand(seed: u64 *) -> u64 {
	// Random XOR
	*seed = *seed ^ (*seed << 13);
	*seed = *seed ^ (*seed >> 17);
	*seed = *seed ^ (*seed << 5);
	return *seed;
}

; Generated by Lang compiler

GLOBAL _start

extern GetCommandLineA
extern ExitProcess

SECTION .code
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

EXTERN OpenFile

EXTERN WriteFile

EXTERN CloseHandle

EXTERN strlen

; let NULL: void*; NULL = 0;

; let GENERIC_WRITE: i32; GENERIC_WRITE = 1073741824;

; let CREATE_NEW: i32; CREATE_NEW = 1;

; let FILE_ATTRIBUTE_NORMAL: i32; FILE_ATTRIBUTE_NORMAL = 128;

; let OF_CREATE: u32; OF_CREATE = 4096;

; let OF_READ: u32; OF_READ = 0;

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 176 ; reserve stack space for 7 locals
    
    ; let file_name: u8*; file_name = "TEST.TXT";
    lea rbx, QWORD [rbp + -176] ; get address of 'file_name'
    lea r10, [REL lit_str_6]
    mov QWORD [rbx], r10
    
    ; let ofstruct: OFSTRUCT;
    lea rdi, QWORD [rbp + -168] ; zero initialize 'ofstruct'
    xor rax, rax
    mov ecx, 136
    rep stosb
    
    ; let file_handle: void*; file_handle = OpenFile(file_name, &ofstruct, OF_CREATE | OF_READ);
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [rbp + -176]
    mov rcx, rbx ; arg 1
    lea rbx, QWORD [rbp + -168] ; get address of 'ofstruct'
    mov rdx, rbx ; arg 2
    mov ebx, DWORD [REL OF_CREATE]
    mov r10d, DWORD [REL OF_READ]
    or rbx, r10
    mov r8, rbx ; arg 3
    call OpenFile
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -32] ; get address of 'file_handle'
    mov QWORD [r10], rbx
    
    ; if (file_handle == cast(void*) -1)
    mov rbx, -1
    mov r10, QWORD [rbp + -32]
    cmp r10, rbx
    sete r10b
    and r10b, 1
    movzx r10, r10b
    cmp r10, 0
    je L_exit0
        ; return -1
        mov rbx, -1
        mov rax, rbx ; return via rax
        jmp L_function_main_exit
        
    L_exit0:
    
    ; let path: u8*; path = ofstruct.szPathName;
    lea rbx, QWORD [rbp + -168] ; get address of 'ofstruct'
    add rbx, 8 ; member offset 'szPathName'
    lea r10, QWORD [rbp + -24] ; get address of 'path'
    mov QWORD [r10], rbx
    
    ; let path_len: i32; path_len = cast(i32) strlen(path);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + -24]
    mov rcx, rbx ; arg 1
    call strlen
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'path_len'
    mov DWORD [r10], ebx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -12], 0 ; zero initialize 'bytes_written'
    
    ; let err: bool; err = WriteFile(file_handle, path, path_len, &bytes_written, 0);
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -32]
    mov rcx, rbx ; arg 1
    mov rbx, QWORD [rbp + -24]
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + -16]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -12] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov DWORD [rsp + 32], ebx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -8] ; get address of 'err'
    mov BYTE [r10], bl
    
    ; CloseHandle(file_handle)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + -32]
    mov rcx, rbx ; arg 1
    call CloseHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; if (err == false)
    movzx rbx, BYTE [rbp + -8]
    mov r10, 0
    cmp rbx, r10
    sete bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit1
        ; return -1
        mov rbx, -1
        mov rax, rbx ; return via rax
        jmp L_function_main_exit
        
    L_exit1:
    
    ; return 0
    mov rbx, 0
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data
NULL dq 0
GENERIC_WRITE dq 1073741824
CREATE_NEW dq 1
FILE_ATTRIBUTE_NORMAL dq 128
OF_CREATE dq 4096
OF_READ dq 0
lit_str_6 db "TEST.TXT", 0

; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve stack space for 5 locals
    
    ; let a: i32; a = 55;
    lea rbx, QWORD [rbp + -32] ; get address of 'a'
    mov r10, 55
    mov DWORD [rbx], r10d
    
    ; let b: i32; b = a++;
    lea rbx, QWORD [rbp + -32] ; get address of 'a'
    mov r10, rbx
    movsx rbx, DWORD [rbx]
    mov r11, rbx
    inc r11
    mov DWORD [r10], r11d
    lea r10, QWORD [rbp + -28] ; get address of 'b'
    mov DWORD [r10], ebx
    
    ; let c: i32; c = ++a;
    lea rbx, QWORD [rbp + -32] ; get address of 'a'
    mov r10, rbx
    movsx rbx, DWORD [rbx]
    inc rbx
    mov DWORD [r10], ebx
    lea r10, QWORD [rbp + -24] ; get address of 'c'
    mov DWORD [r10], ebx
    
    ; let d: i32; d = --a;
    lea rbx, QWORD [rbp + -32] ; get address of 'a'
    mov r10, rbx
    movsx rbx, DWORD [rbx]
    dec rbx
    mov DWORD [r10], ebx
    lea r10, QWORD [rbp + -20] ; get address of 'd'
    mov DWORD [r10], ebx
    
    ; let e: i32; e = a--;
    lea rbx, QWORD [rbp + -32] ; get address of 'a'
    mov r10, rbx
    movsx rbx, DWORD [rbx]
    mov r11, rbx
    dec r11
    mov DWORD [r10], r11d
    lea r10, QWORD [rbp + -16] ; get address of 'e'
    mov DWORD [r10], ebx
    
    ; return e - d + c - b
    movsx rbx, DWORD [rbp + -16]
    movsx r10, DWORD [rbp + -20]
    sub rbx, r10
    movsx r10, DWORD [rbp + -24]
    add rbx, r10
    movsx r10, DWORD [rbp + -28]
    sub rbx, r10
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data

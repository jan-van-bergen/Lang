; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

line_squared_length:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 2 locals
    
    ; let dx: f32; dx = *line.end.x - *line.start.x;
    mov rbx, QWORD [rbp + 16]
    add rbx, 8 ; member offset 'end'
    add rbx, 0 ; member offset 'x'
    movss xmm4, DWORD [rbx]
    mov rbx, QWORD [rbp + 16]
    add rbx, 0 ; member offset 'start'
    add rbx, 0 ; member offset 'x'
    movss xmm5, DWORD [rbx]
    subss xmm4, xmm5
    lea rbx, QWORD [rbp + -16] ; get address of 'dx'
    movss DWORD [rbx], xmm4
    
    ; let dy: f32; dy = *line.end.y - *line.start.y;
    mov rbx, QWORD [rbp + 16]
    add rbx, 8 ; member offset 'end'
    add rbx, 4 ; member offset 'y'
    movss xmm4, DWORD [rbx]
    mov rbx, QWORD [rbp + 16]
    add rbx, 0 ; member offset 'start'
    add rbx, 4 ; member offset 'y'
    movss xmm5, DWORD [rbx]
    subss xmm4, xmm5
    lea rbx, QWORD [rbp + -12] ; get address of 'dy'
    movss DWORD [rbx], xmm4
    
    ; return dx * dx + dy * dy
    movss xmm5, DWORD [rbp + -16]
    movss xmm6, DWORD [rbp + -16]
    mulss xmm5, xmm6
    movss xmm6, DWORD [rbp + -12]
    movss xmm7, DWORD [rbp + -12]
    mulss xmm6, xmm7
    addss xmm5, xmm6
    movss xmm0, xmm5 ; return via xmm0
    jmp L_function_line_squared_length_exit
    
    xor rax, rax ; Default return value 0
    L_function_line_squared_length_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 1 locals
    
    ; let line: Line;
    lea rdi, QWORD [rbp + -16] ; zero initialize 'line'
    xor rax, rax
    mov ecx, 16
    rep stosb
    
    ; line.start.x = 2.000000f
    lea rbx, QWORD [rbp + -16] ; get address of 'line'
    add rbx, 0 ; member offset 'start'
    add rbx, 0 ; member offset 'x'
    movss xmm4, DWORD [REL lit_flt_0]
    movss DWORD [rbx], xmm4
    
    ; line.start.y = 1.000000f
    lea rbx, QWORD [rbp + -16] ; get address of 'line'
    add rbx, 0 ; member offset 'start'
    add rbx, 4 ; member offset 'y'
    movss xmm4, DWORD [REL lit_flt_1]
    movss DWORD [rbx], xmm4
    
    ; line.end.x = 5.000000f
    lea rbx, QWORD [rbp + -16] ; get address of 'line'
    add rbx, 8 ; member offset 'end'
    add rbx, 0 ; member offset 'x'
    movss xmm4, DWORD [REL lit_flt_2]
    movss DWORD [rbx], xmm4
    
    ; line.end.y = 2.000000f
    lea rbx, QWORD [rbp + -16] ; get address of 'line'
    add rbx, 8 ; member offset 'end'
    add rbx, 4 ; member offset 'y'
    movss xmm4, DWORD [REL lit_flt_3]
    movss DWORD [rbx], xmm4
    
    ; return cast(i32) line_squared_length(&line)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    lea rbx, QWORD [rbp + -16] ; get address of 'line'
    mov rcx, rbx ; arg 1
    call line_squared_length
    add rsp, 32 ; pop arguments
    movss xmm4, xmm0 ; get return value (f32)
    cvttss2si rbx, xmm4
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data
lit_flt_0 dq 40000000h ; 2.000000f
lit_flt_1 dq 3f800000h ; 1.000000f
lit_flt_2 dq 40a00000h ; 5.000000f
lit_flt_3 dq 40000000h ; 2.000000f

; Generated by Lang compiler

GLOBAL _start

extern GetCommandLineA
extern ExitProcess

SECTION .code
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

EXTERN GetStdHandle

EXTERN WriteFile

strlen:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 1 locals
    
    ; let len: i32; len = 0;
    lea rbx, QWORD [rbp + -16] ; get address of 'len'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (*(str + len) != 0)
    L_loop0:
    mov rbx, QWORD [rbp + 16]
    movsx r10, DWORD [rbp + -16]
    add rbx, r10
    movzx rbx, BYTE [rbx]
    mov r10, 0
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit0
        ; len = len + 1
        movsx rbx, DWORD [rbp + -16]
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -16] ; get address of 'len'
        mov DWORD [r10], ebx
        
    jmp L_loop0
    L_exit0:
    
    ; return len
    movsx rbx, DWORD [rbp + -16]
    mov rax, rbx ; return via rax
    jmp L_function_strlen_exit
    
    xor rax, rax ; Default return value 0
    L_function_strlen_exit:
    mov rsp, rbp
    pop rbp
    ret
    

print:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    sub rsp, 16 ; reserve stack space for 3 locals
    
    ; let std_handle: void*; std_handle = GetStdHandle(-11);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, -11
    mov rcx, rbx ; arg 1
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    
    ; let str_len: i32; str_len = strlen(str);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + 16]
    mov rcx, rbx ; arg 1
    call strlen
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -8] ; get address of 'str_len'
    mov DWORD [r10], ebx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -4], 0 ; zero initialize 'bytes_written'
    
    ; WriteFile(std_handle, str, str_len, &bytes_written, 0)
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16]
    mov rcx, rbx ; arg 1
    mov rbx, QWORD [rbp + 16]
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + -8]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -4] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov DWORD [rsp + 32], ebx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_exit:
    mov rsp, rbp
    pop rbp
    ret
    

; let str_0: u8*; str_0 = "Hello\n";

; let str_1: u8*; str_1 = "\tworld\n";

; let str_2: u8*; str_2 = "Ola\n";

; let str_3: u8*; str_3 = "\tmundo\n";

; let str_4: u8*; str_4 = "Bye\n";

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 48 ; reserve stack space for 2 locals
    
    ; let strings: u8*[5];
    mov QWORD [rbp + -48], 0 ; zero initialize 'strings'
    
    ; *(strings + 0 * sizeof(u8*)) = str_0
    mov rbx, 0
    mov r10, 8 ; sizeof 'u8*'
    imul rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'strings'
    add r10, rbx
    lea rbx, QWORD [REL str_0] ; get address of 'str_0'
    mov QWORD [r10], rbx
    
    ; *(strings + 1 * sizeof(u8*)) = str_1
    mov rbx, 1
    mov r10, 8 ; sizeof 'u8*'
    imul rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'strings'
    add r10, rbx
    lea rbx, QWORD [REL str_1] ; get address of 'str_1'
    mov QWORD [r10], rbx
    
    ; *(strings + 2 * sizeof(u8*)) = str_2
    mov rbx, 2
    mov r10, 8 ; sizeof 'u8*'
    imul rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'strings'
    add r10, rbx
    lea rbx, QWORD [REL str_2] ; get address of 'str_2'
    mov QWORD [r10], rbx
    
    ; *(strings + 3 * sizeof(u8*)) = str_3
    mov rbx, 3
    mov r10, 8 ; sizeof 'u8*'
    imul rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'strings'
    add r10, rbx
    lea rbx, QWORD [REL str_3] ; get address of 'str_3'
    mov QWORD [r10], rbx
    
    ; *(strings + 4 * sizeof(u8*)) = str_4
    mov rbx, 4
    mov r10, 8 ; sizeof 'u8*'
    imul rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'strings'
    add r10, rbx
    lea rbx, QWORD [REL str_4] ; get address of 'str_4'
    mov QWORD [r10], rbx
    
    ; let i: i32; i = 0;
    lea rbx, QWORD [rbp + -8] ; get address of 'i'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (i < 5)
    L_loop1:
    movsx rbx, DWORD [rbp + -8]
    mov r10, 5
    cmp rbx, r10
    setl bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit1
        ; print(*(strings + i * sizeof(u8*)))
        sub rsp, 32 ; reserve shadow space and 1 arguments
        movsx rbx, DWORD [rbp + -8]
        mov r10, 8 ; sizeof 'u8*'
        imul rbx, r10
        lea r10, QWORD [rbp + -48] ; get address of 'strings'
        add r10, rbx
        mov r10, QWORD [r10]
        mov rcx, r10 ; arg 1
        call print
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        
        ; i++
        lea rbx, QWORD [rbp + -8] ; get address of 'i'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
    jmp L_loop1
    L_exit1:
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data
str_0 db "Hello", 0Ah, "", 0
str_1 db "", 09h, "world", 0Ah, "", 0
str_2 db "Ola", 0Ah, "", 0
str_3 db "", 09h, "mundo", 0Ah, "", 0
str_4 db "Bye", 0Ah, "", 0

extern malloc(size: int) -> void *;
extern free(ptr: void *);

extern assert(assertion: bool);

extern print_num(num: int);
extern puts(str: char *);

export merge;
export sort;
export main;

func merge(array: int *, first: int, middle: int, last: int) {
	count := last - first;
	tmp   := cast(int *) malloc(count * sizeof(int));
	
	head_left  : int * = array + first;
	head_right : int * = array + middle;
	
	i := 0;
	
	// Merge into tmp buffer
	while (true) {
		done_left  : bool = (head_left  == array + middle);
		done_right : bool = (head_right == array + last);
		
		if (done_left && done_right) break;
		
		pick_left : bool;
		
		if (done_left) {
			pick_left = false;
		} else if (done_right) {
			pick_left = true;
		} else {
			pick_left = (*head_left < *head_right);
		}
		
		if (pick_left) {
			tmp[i] = *head_left++;
		} else {
			tmp[i] = *head_right++;
		}
		i++;
	}

	assert(i == count);

	// Copy tmp buffer back over
	i = 0;
	while (i < count) {
		array[first + i] = tmp[i];
		i++;
	}
	
	free(tmp);
}

func sort(array: int *, first: int, last: int) {
	if (last - first <= 1) return;
	
	middle := (first + last) / 2;
	
	sort(array, first, middle);
	sort(array, middle, last);
	
	merge(array, first, middle, last);
}

func main() -> int {
	array : int[8];
	array[0] = 8;
	array[1] = 4;
	array[2] = 5;
	array[3] = 3;
	array[4] = 7;
	array[5] = 1;
	array[6] = 2;
	array[7] = 9;
	
	sort(array, 0, 8);
	
	i := 0;
	while (i < 8) {
		elem := array[i];
		print_num(elem);
		if (i < 7) puts(", ");
		
		i++;
	}
	
	return array[0];
}

; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 48 ; reserve stack space for 7 locals
    
    ; let i: u32; i = 2 + 270;
    mov rbx, 2
    mov r10, 270
    add rbx, r10
    lea r10, QWORD [rbp + -48] ; get address of 'i'
    mov DWORD [r10], ebx
    
    ; let s: u8*; s = "test";
    lea rbx, QWORD [rbp + -40] ; get address of 's'
    lea r10, [REL lit_str_0]
    mov QWORD [rbx], r10
    
    ; let c: u8; c = 'c';
    lea rbx, QWORD [rbp + -32] ; get address of 'c'
    mov r10, 99
    mov BYTE [rbx], r10b
    
    ; let xyz: f32[3];
    mov QWORD [rbp + -28], 0 ; zero initialize 'xyz'
    
    ; let y: f32; y = xyz[1];
    lea rbx, QWORD [rbp + -28] ; get address of 'xyz'
    mov r10, 1
    imul r10, 4
    add rbx, r10
    movss xmm4, DWORD [rbx]
    lea rbx, QWORD [rbp + -16] ; get address of 'y'
    movss DWORD [rbx], xmm4
    
    ; let test: Test;
    lea rdi, QWORD [rbp + -12] ; zero initialize 'test'
    xor rax, rax
    mov ecx, 8
    rep stosb
    
    ; let mem_1: f32; mem_1 = test.member_1;
    lea rbx, QWORD [rbp + -12] ; get address of 'test'
    add rbx, 4 ; member offset 'member_1'
    movss xmm4, DWORD [rbx]
    lea rbx, QWORD [rbp + -4] ; get address of 'mem_1'
    movss DWORD [rbx], xmm4
    
    ; return i
    mov ebx, DWORD [rbp + -48]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data
lit_str_0 db "test", 0

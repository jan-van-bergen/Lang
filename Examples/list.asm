; Generated by Lang compiler

GLOBAL _start

extern GetCommandLineA
extern ExitProcess

SECTION .code
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

EXTERN GetProcessHeap

EXTERN HeapAlloc

EXTERN HeapFree

EXTERN CopyMemory

EXTERN ExitProcess

assert:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov BYTE [rbp + 16], cl ; push arg 0 
    
    ; if (!expression)
    movzx rbx, BYTE [rbp + 16]
    xor rbx, -1
    and rbx, 1
    cmp rbx, 0
    je L_exit1
        ; ExitProcess(1)
        sub rsp, 32 ; reserve shadow space and 1 arguments
        mov rbx, 1
        mov rcx, rbx ; arg 1
        call ExitProcess
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        
    L_exit1:
    
    xor rax, rax ; Default return value 0
    L_function_assert_exit:
    mov rsp, rbp
    pop rbp
    ret
    

; let NULL: void*; NULL = 0;

; let heap: void*;

malloc:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    
    ; if (heap == NULL)
    mov rbx, QWORD [REL heap]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    sete bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit2
        ; heap = GetProcessHeap()
        sub rsp, 32 ; reserve shadow space and 0 arguments
        call GetProcessHeap
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        lea r10, QWORD [REL heap] ; get address of 'heap'
        mov QWORD [r10], rbx
        
    L_exit2:
    
    ; return HeapAlloc(heap, 0, size)
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [REL heap]
    mov rcx, rbx ; arg 1
    mov rbx, 0
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + 16]
    mov r8, rbx ; arg 3
    call HeapAlloc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov rax, rbx ; return via rax
    jmp L_function_malloc_exit
    
    xor rax, rax ; Default return value 0
    L_function_malloc_exit:
    mov rsp, rbp
    pop rbp
    ret
    

free:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    
    ; assert(ptr != NULL)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + 16]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    mov rcx, rbx ; arg 1
    call assert
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; assert(heap != NULL)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [REL heap]
    mov r10, QWORD [REL NULL]
    cmp rbx, r10
    setne bl
    and bl, 1
    movzx rbx, bl
    mov rcx, rbx ; arg 1
    call assert
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; HeapFree(heap, 0, ptr)
    sub rsp, 32 ; reserve shadow space and 3 arguments
    mov rbx, QWORD [REL heap]
    mov rcx, rbx ; arg 1
    mov rbx, 0
    mov rdx, rbx ; arg 2
    mov rbx, QWORD [rbp + 16]
    mov r8, rbx ; arg 3
    call HeapFree
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_free_exit:
    mov rsp, rbp
    pop rbp
    ret
    

EXTERN GetStdHandle

EXTERN WriteFile

EXTERN strlen

; let STD_OUTPUT_HANDLE: i32; STD_OUTPUT_HANDLE = -11;

print:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 16 ; reserve stack space for 2 locals
    
    ; let std_handle: i32*; std_handle = GetStdHandle(STD_OUTPUT_HANDLE);
    sub rsp, 32 ; reserve shadow space and 1 arguments
    movsx rbx, DWORD [REL STD_OUTPUT_HANDLE]
    mov rcx, rbx ; arg 1
    call GetStdHandle
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    lea r10, QWORD [rbp + -16] ; get address of 'std_handle'
    mov QWORD [r10], rbx
    
    ; let bytes_written: i32;
    mov DWORD [rbp + -8], 0 ; zero initialize 'bytes_written'
    
    ; WriteFile(std_handle, str, str_len, &bytes_written, 0)
    sub rsp, 48 ; reserve shadow space and 5 arguments
    mov rbx, QWORD [rbp + -16]
    mov rcx, rbx ; arg 1
    mov rbx, QWORD [rbp + 16]
    mov rdx, rbx ; arg 2
    movsx rbx, DWORD [rbp + 24]
    mov r8, rbx ; arg 3
    lea rbx, QWORD [rbp + -8] ; get address of 'bytes_written'
    mov r9, rbx ; arg 4
    mov rbx, 0
    mov QWORD [rsp + 32], rbx ; arg 5
    call WriteFile
    add rsp, 48 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_exit:
    mov rsp, rbp
    pop rbp
    ret
    

print_num:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov DWORD [rbp + 16], ecx ; push arg 0 
    sub rsp, 32 ; reserve stack space for 5 locals
    
    ; let num_str: u8*; num_str = "         ";
    lea rbx, QWORD [rbp + -32] ; get address of 'num_str'
    lea r10, [REL lit_str_3]
    mov QWORD [rbx], r10
    
    ; let idx: i32; idx = 0;
    lea rbx, QWORD [rbp + -24] ; get address of 'idx'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (num > 0)
    L_loop3:
    movsx rbx, DWORD [rbp + 16]
    mov r10, 0
    cmp rbx, r10
    setg bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit3
        ; let digit: u8; digit = cast(u8) num % 10;
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rdx
        lea r10, QWORD [rbp + -20] ; get address of 'digit'
        mov BYTE [r10], bl
        
        ; *(num_str + idx) = digit + 48
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movzx r10, BYTE [rbp + -20]
        mov r11, 48
        add r10, r11
        mov BYTE [rbx], r10b
        
        ; num = num / 10
        movsx rbx, DWORD [rbp + 16]
        mov r10, 10
        mov rax, rbx
        cqo
        idiv r10
        mov rbx, rax
        lea r10, QWORD [rbp + 16] ; get address of 'num'
        mov DWORD [r10], ebx
        
        ; idx = idx + 1
        movsx rbx, DWORD [rbp + -24]
        mov r10, 1
        add rbx, r10
        lea r10, QWORD [rbp + -24] ; get address of 'idx'
        mov DWORD [r10], ebx
        
    jmp L_loop3
    L_exit3:
    
    ; let i: i32; i = 0;
    lea rbx, QWORD [rbp + -16] ; get address of 'i'
    mov r10, 0
    mov DWORD [rbx], r10d
    
    ; while (i < idx / 2)
    L_loop4:
    movsx rbx, DWORD [rbp + -24]
    mov r10, 2
    mov rax, rbx
    cqo
    idiv r10
    mov rbx, rax
    movsx r10, DWORD [rbp + -16]
    cmp r10, rbx
    setl r10b
    and r10b, 1
    movzx r10, r10b
    cmp r10, 0
    je L_exit4
        ; let tmp: u8; tmp = *(num_str + i);
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -16]
        add rbx, r10
        movzx rbx, BYTE [rbx]
        lea r10, QWORD [rbp + -12] ; get address of 'tmp'
        mov BYTE [r10], bl
        
        ; *(num_str + i) = *(num_str + idx - i - 1)
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movsx r10, DWORD [rbp + -16]
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movzx rbx, BYTE [rbx]
        mov r10, QWORD [rbp + -32]
        movsx r11, DWORD [rbp + -16]
        add r10, r11
        mov BYTE [r10], bl
        
        ; *(num_str + idx - i - 1) = tmp
        mov rbx, QWORD [rbp + -32]
        movsx r10, DWORD [rbp + -24]
        add rbx, r10
        movsx r10, DWORD [rbp + -16]
        sub rbx, r10
        mov r10, 1
        sub rbx, r10
        movzx r10, BYTE [rbp + -12]
        mov BYTE [rbx], r10b
        
        ; i++
        lea rbx, QWORD [rbp + -16] ; get address of 'i'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
    jmp L_loop4
    L_exit4:
    
    ; *(num_str + idx) = 32
    mov rbx, QWORD [rbp + -32]
    movsx r10, DWORD [rbp + -24]
    add rbx, r10
    mov r10, 32
    mov BYTE [rbx], r10b
    
    ; print(num_str, idx + 1)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    mov rbx, QWORD [rbp + -32]
    mov rcx, rbx ; arg 1
    movsx rbx, DWORD [rbp + -24]
    mov r10, 1
    add rbx, r10
    mov rdx, rbx ; arg 2
    call print
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    xor rax, rax ; Default return value 0
    L_function_print_num_exit:
    mov rsp, rbp
    pop rbp
    ret
    

list_init:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    
    ; *list.length = 0
    mov rbx, QWORD [rbp + 16]
    add rbx, 0 ; member offset 'length'
    mov r10, 0
    mov QWORD [rbx], r10
    
    ; *list.capacity = 2
    mov rbx, QWORD [rbp + 16]
    add rbx, 8 ; member offset 'capacity'
    mov r10, 2
    mov QWORD [rbx], r10
    
    ; *list.data = malloc(*list.capacity * sizeof(i32))
    sub rsp, 32 ; reserve shadow space and 1 arguments
    mov rbx, QWORD [rbp + 16]
    add rbx, 8 ; member offset 'capacity'
    mov rbx, QWORD [rbx]
    mov r10, 4 ; sizeof 'i32'
    imul rbx, r10
    mov rcx, rbx ; arg 1
    call malloc
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    mov r10, QWORD [rbp + 16]
    add r10, 16 ; member offset 'data'
    mov QWORD [r10], rbx
    
    xor rax, rax ; Default return value 0
    L_function_list_init_exit:
    mov rsp, rbp
    pop rbp
    ret
    

list_push:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    mov QWORD [rbp + 16], rcx ; push arg 0 
    mov DWORD [rbp + 24], edx ; push arg 1 
    sub rsp, 16 ; reserve stack space for 2 locals
    
    ; if (*list.length == *list.capacity)
    mov rbx, QWORD [rbp + 16]
    add rbx, 0 ; member offset 'length'
    mov rbx, QWORD [rbx]
    mov r10, QWORD [rbp + 16]
    add r10, 8 ; member offset 'capacity'
    mov r10, QWORD [r10]
    cmp rbx, r10
    sete bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    je L_exit5
        ; *list.capacity = *list.capacity * 2
        mov rbx, QWORD [rbp + 16]
        add rbx, 8 ; member offset 'capacity'
        mov rbx, QWORD [rbx]
        mov r10, 2
        imul rbx, r10
        mov r10, QWORD [rbp + 16]
        add r10, 8 ; member offset 'capacity'
        mov QWORD [r10], rbx
        
        ; let new_data: i32*; new_data = malloc(*list.capacity * sizeof(i32));
        sub rsp, 32 ; reserve shadow space and 1 arguments
        mov rbx, QWORD [rbp + 16]
        add rbx, 8 ; member offset 'capacity'
        mov rbx, QWORD [rbx]
        mov r10, 4 ; sizeof 'i32'
        imul rbx, r10
        mov rcx, rbx ; arg 1
        call malloc
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        lea r10, QWORD [rbp + -16] ; get address of 'new_data'
        mov QWORD [r10], rbx
        
        ; let i: i32;
        mov DWORD [rbp + -8], 0 ; zero initialize 'i'
        
        ; while (i < *list.length)
        L_loop6:
        mov rbx, QWORD [rbp + 16]
        add rbx, 0 ; member offset 'length'
        mov rbx, QWORD [rbx]
        movsx r10, DWORD [rbp + -8]
        cmp r10, rbx
        setl r10b
        and r10b, 1
        movzx r10, r10b
        cmp r10, 0
        je L_exit6
            ; new_data[i] = *list.data[i]
            lea rbx, QWORD [rbp + -16] ; get address of 'new_data'
            movsx r10, DWORD [rbp + -8]
            mov rbx, QWORD [rbx]
            imul r10, 4
            add rbx, r10
            mov r10, QWORD [rbp + 16]
            add r10, 16 ; member offset 'data'
            movsx r11, DWORD [rbp + -8]
            mov r10, QWORD [r10]
            imul r11, 4
            add r10, r11
            movsx r10, DWORD [r10]
            mov DWORD [rbx], r10d
            
            ; i++
            lea rbx, QWORD [rbp + -8] ; get address of 'i'
            mov r10, rbx
            movsx rbx, DWORD [rbx]
            mov r11, rbx
            inc r11
            mov DWORD [r10], r11d
            
        jmp L_loop6
        L_exit6:
        
        ; free(*list.data)
        sub rsp, 32 ; reserve shadow space and 1 arguments
        mov rbx, QWORD [rbp + 16]
        add rbx, 16 ; member offset 'data'
        mov rbx, QWORD [rbx]
        mov rcx, rbx ; arg 1
        call free
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        
        ; *list.data = new_data
        mov rbx, QWORD [rbp + 16]
        add rbx, 16 ; member offset 'data'
        mov r10, QWORD [rbp + -16]
        mov QWORD [rbx], r10
        
    L_exit5:
    
    ; *list.data[*list.length++] = element
    mov rbx, QWORD [rbp + 16]
    add rbx, 0 ; member offset 'length'
    mov r10, rbx
    mov rbx, QWORD [rbx]
    mov r11, rbx
    inc r11
    mov QWORD [r10], r11
    mov r10, QWORD [rbp + 16]
    add r10, 16 ; member offset 'data'
    mov r10, QWORD [r10]
    imul rbx, 4
    add r10, rbx
    movsx rbx, DWORD [rbp + 24]
    mov DWORD [r10], ebx
    
    xor rax, rax ; Default return value 0
    L_function_list_push_exit:
    mov rsp, rbp
    pop rbp
    ret
    

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 32 ; reserve stack space for 2 locals
    
    ; let list: List;
    lea rdi, QWORD [rbp + -32] ; zero initialize 'list'
    xor rax, rax
    mov ecx, 24
    rep stosb
    
    ; list_init(&list)
    sub rsp, 32 ; reserve shadow space and 1 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    call list_init
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 3)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 3
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 1)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 1
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 4)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 4
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 1)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 1
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 5)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 5
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 9)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 9
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 2)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 2
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 6)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 6
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 5)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 5
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 3)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 3
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; list_push(&list, 5)
    sub rsp, 32 ; reserve shadow space and 2 arguments
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    mov rcx, rbx ; arg 1
    mov rbx, 5
    mov rdx, rbx ; arg 2
    call list_push
    add rsp, 32 ; pop arguments
    mov rbx, rax ; get return value
    
    ; let i: i32;
    mov DWORD [rbp + -8], 0 ; zero initialize 'i'
    
    ; while (i < list.length)
    L_loop7:
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    add rbx, 0 ; member offset 'length'
    mov rbx, QWORD [rbx]
    movsx r10, DWORD [rbp + -8]
    cmp r10, rbx
    setl r10b
    and r10b, 1
    movzx r10, r10b
    cmp r10, 0
    je L_exit7
        ; print_num(list.data[i])
        sub rsp, 32 ; reserve shadow space and 1 arguments
        lea rbx, QWORD [rbp + -32] ; get address of 'list'
        add rbx, 16 ; member offset 'data'
        movsx r10, DWORD [rbp + -8]
        mov rbx, QWORD [rbx]
        imul r10, 4
        add rbx, r10
        movsx rbx, DWORD [rbx]
        mov rcx, rbx ; arg 1
        call print_num
        add rsp, 32 ; pop arguments
        mov rbx, rax ; get return value
        
        ; i++
        lea rbx, QWORD [rbp + -8] ; get address of 'i'
        mov r10, rbx
        movsx rbx, DWORD [rbx]
        mov r11, rbx
        inc r11
        mov DWORD [r10], r11d
        
    jmp L_loop7
    L_exit7:
    
    ; return list.capacity
    lea rbx, QWORD [rbp + -32] ; get address of 'list'
    add rbx, 8 ; member offset 'capacity'
    mov rbx, QWORD [rbx]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


SECTION .data
NULL dq 0
heap dq 0
STD_OUTPUT_HANDLE dq -11
lit_str_3 db "         ", 0

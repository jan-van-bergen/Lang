; Generated by Lang compiler

extern GetCommandLineA
extern ExitProcess

section .code
global _start
_start:
    call GetCommandLineA
    mov r10, rax
    xor rcx, rcx
    sub rsp, 8 * 64 ; Max 64 command line args
    mov rdx, rsp
    arg_loop_top:
    mov bl, BYTE [rax]
    test bl, bl
    jz arg_loop_exit
    cmp bl, ' '
    jne arg_loop_next
    cmp r10, rax
    je skip
    mov BYTE [rax], 0
    mov QWORD [rdx], r10
    add rdx, 8
    inc rcx
    skip:
    mov r10, rax
    inc r10
    arg_loop_next:
    inc rax
    jmp arg_loop_top
    arg_loop_exit:
    mov al, BYTE [r10]
    cmp al, ' '
    je args_done
    cmp al, 0
    je args_done
    mov QWORD [rdx], r10
    inc rcx
    args_done:
    mov rdx, rsp
    sub rsp, 32
    call main
    mov ecx, eax
    call ExitProcess

main:
    push rbp ; save RBP
    mov rbp, rsp ; stack frame
    sub rsp, 16 ; reserve stack space for 2 locals
    
    ; let a: u32; a = 1;
    lea rbx, QWORD [rbp + -16] ; get address of 'a'
    mov r10, 1
    mov DWORD [rbx], r10d
    
    ; let b: i32;
    mov DWORD [rbp + -12], 0 ; zero initialize 'b'
    
    ; if (a > 0)
    mov ebx, DWORD [rbp + -16]
    mov r10, 0
    cmp rbx, r10
    setg bl
    and bl, 1
    movzx rbx, bl
    cmp rbx, 0
    ; else
    je L_else0
        ; b = 49374
        lea rbx, QWORD [rbp + -12] ; get address of 'b'
        mov r10, 49374
        mov DWORD [rbx], r10d
        
    jmp L_exit0
    L_else0:
        ; b = 48879
        lea rbx, QWORD [rbp + -12] ; get address of 'b'
        mov r10, 48879
        mov DWORD [rbx], r10d
        
    L_exit0:
    
    ; return b
    movsx rbx, DWORD [rbp + -12]
    mov rax, rbx ; return via rax
    jmp L_function_main_exit
    
    xor rax, rax ; Default return value 0
    L_function_main_exit:
    mov rsp, rbp
    pop rbp
    ret
    


section .data
